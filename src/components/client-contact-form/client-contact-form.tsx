import React, { useRef } from "react"
import axios from "axios"
import { useForm, Controller } from "react-hook-form"
import { 
  StyledClientContactForm, 
  ModalOverlay,
  StyledButton, 
} from "./client-contact-form.styled"
import InputMask from "react-input-mask"
import { useAddRecordMutation } from "../../api" // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º RTK Query

interface ClientContactFormProps {
  isOpen: boolean;
  onClose: () => void;
}

interface FormData {
  name: string;
  telegram: string;
  phone: string;
  selectedOption: string;
}

export const ClientContactForm: React.FC<ClientContactFormProps> = ({ isOpen, onClose }) => {
  const modalRef = useRef<HTMLFormElement>(null)
  const {
    control,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<FormData>({
    defaultValues: {
      name: "",
      telegram: "",
      phone: "",
      selectedOption: "1",
    },
  })

  const [addRecord, { isLoading }] = useAddRecordMutation() // –ò—Å–ø–æ–ª—å–∑—É–µ–º RTK Query
  const [successMessage, setSuccessMessage] = React.useState("")

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫ –∏–∑ localStorage
  const getSubmissionCount = () => {
    const count = localStorage.getItem("submissionCount")
    return count ? parseInt(count, 10) : 0
  }

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫
  const incrementSubmissionCount = () => {
    const count = getSubmissionCount() + 1
    localStorage.setItem("submissionCount", count.toString())
    return count
  }

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –Ω–∞ –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å (–Ω–æ –ù–ï –Ω–∞ —Ñ–æ—Ä–º—É)
  const handleOverlayClick = (event: React.MouseEvent<HTMLDivElement>) => {
    if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
      onClose()
    }
  }

  const BOT_TOKEN = "6614524564:AAE27PNrRDhzXmJeyZnE0xi7l8lk3jcqStI"
  const CHAT_ID = "969675758"
  const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`

  const onSubmit = async (data: FormData) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (getSubmissionCount() >= 3) {
      alert("–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–æ–∫ —Ñ–æ—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
      return
    }

    const message = `
üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ Speaking Club:
üë§ –ò–º—è: ${data.name}
üí¨ Telegram: ${data.telegram}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
üì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: ${data.selectedOption}
  `

    try {
      await axios.post(TELEGRAM_API, {chat_id: CHAT_ID, text: message})
      incrementSubmissionCount()
      reset()
      setSuccessMessage("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
      setTimeout(() => setSuccessMessage(""), 3000)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error)
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    }
  }

  if (!isOpen) return null // –ï—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞, –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º

  return (
    <ModalOverlay onClick={handleOverlayClick}>
      <StyledClientContactForm
        ref={modalRef}
        onClick={(e) => e.stopPropagation()}
        onSubmit={handleSubmit(onSubmit)}>
      
        <span className="close" onClick={onClose}>
          &times;
        </span>
        <h1>
          <span>welcome</span> –≤ —Å–ø–∏–∫–∏–Ω–≥ –∫–ª–∞–±! <br/>
        </h1>
        <div className="input-wrapper">
          <label htmlFor="name"><br/>–ò–º—è</label>
          <Controller
            name="name"
            control={control}
            rules={{
              required: "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
              pattern: {
                value: /^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s]+$/,
                message: "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã",
              },
            }}
            render={({ field }) => (
              <input
                {...field}
                className="input"
                type="text"
                id="name"
              />
            )}
          />
          {errors.name && <div className="error-message">{errors.name.message}</div>}
        </div>
        <div className="input-wrapper">
          <label htmlFor="telegram">–ù–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ</label>
          <Controller
            name="telegram"
            control={control}
            rules={{
              required: "–ù–∏–∫ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
              validate: (value) =>
                value.startsWith("@") || "–ù–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @",
            }}
            render={({ field }) => (
              <input
                {...field}
                className="input"
                type="text"
                id="telegram"
              />
            )}
          />
          {errors.telegram && <div className="error-message">{errors.telegram.message}</div>}
        </div>
        <div className="input-wrapper">
          <label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</label>
          <Controller
            name="phone"
            control={control}
            rules={{
              required: "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
              validate: (value) =>
                !value.includes("_") && value.replace(/\D/g, "").length === 11,
            }}
            render={({ field }) => (
              <InputMask
                {...field}
                className="input"
                id="phone"
                mask="+7 (999) 999-99-99"
                maskPlaceholder=" "
                placeholder="+7 (___) ___-__-__"
              />
            )}
          />
          {errors.phone && <div className="error-message">{errors.phone.message}</div>}
        </div>
        <div className="input-wrapper">
          <label htmlFor="selectOption">–Ø —Ö–æ—á—É..</label>
          <Controller
            name="selectedOption"
            control={control}
            render={({ field }) => (
              <select
                {...field}
                className="input"
                id="selectOption"
              >
                <option value="1">500‚ÇΩ - –æ–¥–∏–Ω —Ä–∞–∑</option>
                <option value="2">900‚ÇΩ - –ø—Ä–æ—Ö–æ–¥–∫–∞ –Ω–∞ –¥–≤–æ–∏—Ö</option>
                <option value="3">2200‚ÇΩ - –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 5 –≤—Å—Ç—Ä–µ—á</option>
                <option value="4">5000‚ÇΩ - –ª–∏—á–Ω—ã–π —Å–ø–∏–∫–∏–Ω–≥ –∫–ª–∞–±</option>
              </select>
            )}
          />
        </div>
        {successMessage && <div className="success-message">{successMessage}</div>}

        <div className="button-wrapper">
          <StyledButton type="submit" disabled={isLoading || getSubmissionCount() >= 3}>
            {isLoading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
          </StyledButton>
        </div>
        {getSubmissionCount() >= 3 && (
          <div className="error-message">–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–æ–∫ —Ñ–æ—Ä–º—ã.</div>
        )}
      </StyledClientContactForm>
    </ModalOverlay>
  )
}

export default ClientContactForm